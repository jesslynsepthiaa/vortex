import argparse
import logging

from vortex.utils.parser import load_config, check_config
from vortex.core.pipelines import PytorchValidationPipeline

description='Vortex Pytorch model validation pipeline; successful runs will produce autogenerated reports'

def main(args):

    config = load_config(args.config)
    check_result = check_config(config, 'validate')
    print(check_result)
    if not check_result.valid:
        raise RuntimeError("invalid config : %s" % str(check_result))
    weights_file=args.weights

    validation_executor = PytorchValidationPipeline(config=config,
                                                     weights = weights_file,
                                                     backends = args.devices,
                                                     generate_report = True)
    eval_results = validation_executor.run(batch_size=args.batch_size)
    if 'pr_curves' in eval_results :
        eval_results.pop('pr_curves')
    print('validation results: {}'.format(
        ', '.join(['{}: {}'.format(key, value) for key, value in eval_results.items()])
    ))

def add_parser(parent_parser,subparsers = None):
    if subparsers is None:
        parser = parent_parser
    else:
        parser = subparsers.add_parser('validate',description=description)
    parser.add_argument("-c","--config", required=True,help='path to experiment config')
    parser.add_argument("-w","--weights", help='path to selected weights(optional, will be inferred from `output_directory` and `experiment_name` field from config) if not specified')
    parser.add_argument('-v',"--verbose", dest='debug', action='store_true', help='verbose prediction output')
    parser.add_argument("--quiet", dest='debug', action='store_false')
    parser.add_argument("-d","--devices", default=[], nargs="*", help='computation device to be used for prediction, possible to list multiple devices')
    parser.add_argument("-b","--batch-size", default=1, type=int, help='batch size for validation')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=description)
    add_parser(parser)
    args = parser.parse_args()
    if args.debug :
        logging.basicConfig(level=logging.DEBUG)
    main(args)
