import argparse

from vortex.utils.parser import load_config, check_config
from vortex_runtime import model_runtime_map
from vortex.core.pipelines import IRValidationPipeline

description = "Vortex exported IR graph validation pipeline; successful runs will produce autogenerated reports"

def main(args):
    
    available_runtime = []
    for runtime_map in model_runtime_map.values():
        available_runtime.extend(list(runtime_map.keys()))
    available_runtime = set(available_runtime)
    for runtime in args.runtime:
        if runtime not in list(available_runtime):
            raise RuntimeError('Runtime "{}" is not available, available runtime = {}'.format(runtime,list(available_runtime)))

    # Parse config
    config = load_config(args.config)
    check_result = check_config(config, 'validate')
    print(check_result)
    if not check_result.valid:
        raise RuntimeError("invalid config : %s" % str(check_result))
    
    # Initialize IR validator

    validation_executor = IRValidationPipeline(config=config,
                                            model = args.model,
                                            backends = args.runtime,
                                            generate_report = True)
    eval_results = validation_executor.run(batch_size=args.batch_size)

    if 'pr_curves' in eval_results :
        eval_results.pop('pr_curves')
    print('validation results: {}'.format(
        ', '.join(['{}: {}'.format(key, value) for key, value in eval_results.items()])
    ))

def add_parser(parent_parser,subparsers = None):
    if subparsers is None:
        parser = parent_parser
    else:
        parser = subparsers.add_parser('ir_runtime_validate',description=description)
    parser.add_argument("-c","--config", required=True, help='path to experiment config '\
        'including dataset fields, must be valid for validation, dataset.eval will be used for evaluation')
    parser.add_argument("-m","--model", required=True, help='path to IR model')
    parser.add_argument("-r",'--runtime', type=str, default=['cpu'], nargs="*", help='runtime backend device')
    parser.add_argument("-v","--verbose", dest='debug', action='store_true', help='verbose prediction output')
    parser.add_argument("--quiet", dest='debug', action='store_false')
    parser.add_argument("-b","--batch-size", default=1, type=int, help='batch size for validation; NOTE : passed value should be matched with exported model batch size')


if __name__ == '__main__':
    import logging

    parser = argparse.ArgumentParser(description=description)
    add_parser(parser)
    args = parser.parse_args()
    if args.debug :
        logging.basicConfig(level=logging.DEBUG)
    main(args)
